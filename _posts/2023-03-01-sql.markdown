---
layout: post
title:  "SQL Cheat Sheet"
date:   2023-02-22 14:31:20 +0100
categories: [Databases]
featured_image: /images/postgres.png
---
This post serves as cheat sheet for SQL syntax!

# CONTENTS
{: .no_toc}
* TOC
{:toc}


# Creating Tables

### Basic table
{% highlight sql %}
    CREATE TABLE TableName(
        a1 INT,
        a2 TEXT,
        a3 CHAR(6),
        PRIMARY KEY(a1)
    );
{% endhighlight %}

This creates a table called ```TableName``` with three columns ```a1```, ```a2```, and ```a3```.
When you define a column name the datatype of the column needs to be specified after. As you can see
```a1``` is of type ```INT```, ```a2``` is of type ```TEXT``` and ```a3``` is of type ```CHAR```. There are multiple different
datatypes in SQL but the most common ones are:

```INT```: Integers.

```REAL```: Floats.

```NUMERIC(p,s)```: Numbers with p digits before and s digits after.

```CHAR(n)```: Fixed string of size n.

```VARCHAR(n)```: Variable string size with max size n.

```TEXT```: For variable sized strings

```TIMESTAMP```: For date and time.

```DATE``` and ```TIME```: For dates and times of days independently.

The ```PRIMARY KEY``` values tells us that ```a1``` is the primary key of the table. This means that we can use ```a1``` to identify individual rows in our table (the each value in ```a1``` is unique and can only be inserted once). A primary key can also
consist of multiple attributes (columns), this is called a compound key. Remember that if you have a compound key it is the combination of all the attributes in the key that is unique, not each individual atrribute by itself!


### Foreign keys, unique constraints and value constraints
{% highlight sql %}
    CREATE TABLE TableName(
        a1 INT,
        a2 TEXT,
        a3 CHAR(6),
        PRIMARY KEY(a1),
        FOREIGN KEY (a2) REFERENCES AnotherTable(col4),
        UNIQUE(a3),
        CHECK(a1 > 5 AND a1 < 10 )
    );
{% endhighlight %}

The ```FOREIGN KEY``` constraint tells us that values inserted in ```a2``` needs to exist in the column ```col4``` from
```AnotherTable```. Just as with primary keys, you can have compound references. 

The ```UNIQUE``` constraint tells us that the values in ```a3``` need to be unique.

The ```CHECK``` constraint tells us that values inserted in ```a1``` need to be larger than 5 and less than 10.

The ```NOT NULL``` constraint can be added after defining an attribute. This prevents inserts from being NULL.

### More value constraints
Check that the value is one of the listed values:
{% highlight sql %}
    CHECK(a1 IN (1,2,3,4) ),
{% endhighlight %}

Compare two attributes:
{% highlight sql %}
    CHECK(a1 > a2),
{% endhighlight %}
where ```a1``` and ```a2``` are atrributes in the same table.

### Default values

You can add default values when creating columns:
{% highlight sql %}
    a1 TEXT NOT NULL DEFAULT 'hello',
{% endhighlight %}
This sets the default value of ```a2``` to 'hello'. When you perform inserts you can write 'DEFAULT' instead of any value.

If you are working with timestamps:
{% highlight sql %}
    timeOfInsert TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
{% endhighlight %}
```timeOfInsert``` will default to the time when the INSERT is executed.

If you define an attribute with type ```SERIAL``` will give it a default integer (starts with 1) that increases by one for each insert:
{% highlight sql %}
    id SERIAL,
{% endhighlight %}


# INSERT
Insert a row in a table:

{% highlight sql %}
    INSERT INTO TableName VALUES (val1,val2,val3);
{% endhighlight %}


Insert specific attributes:

{% highlight sql %}
    INSERT INTO TableName(a1,a2) VALUES (val1,val2);
{% endhighlight %}

# UPDATE
Modify an existing row:

{% highlight sql %}
    UPDATE tableName SET a1 = 20 WHERE a2 = 'hello';
{% endhighlight %}
This changes the value of ```a1``` to 20 for all rows where ```a2 = 'hello' ```. You can have multiple attributes in the SET clause
and condition on multiple attributes in the WHERE clause. The WHERE cluase can also be removed to change all rows.


# DELETE
Delete row in a table:
{% highlight sql %}
    DELETE FROM TableName WHERE a1 = 5 AND a3 = 'hello';
{% endhighlight %}
Deletes all rows where ```a1 = 5``` and ```a3 = 'hello'```. Can also use ```OR/NOT/IN``` and more.

Delete all rows:
{% highlight sql %}
    DELETE FROM TableName;
{% endhighlight %}

# Removing a table
{% highlight sql %}
    DROP TABLE tableName;
{% endhighlight %}


# SELECT
Assume we have the following three tables in our relational database:

**Players**:
<figure>
    <img src="/assets/images/players.png" alt="players">
    <figcaption><em>Players table</em>.</figcaption>
</figure>  

**Games**:
<figure>
    <img src="/assets/images/games.png" alt="games">
    <figcaption><em>Games table</em>.</figcaption>
</figure>  

**Points**
<figure>
    <img src="/assets/images/points.png" alt="points">
    <figcaption><em>Points table</em>.</figcaption>
</figure>  

{% highlight sql %}
    SELECT <attributes> 
    FROM <table> 
    WHERE <condition on rows>;
{% endhighlight %}

Example:
{% highlight sql %}
    SELECT name
    FROM Players 
    WHERE team = 'Hawks';
{% endhighlight %}
Selects the name of players that play for team Hawks.

## Cartesian product
The cartesian product of two tables is every row from table A combined with every row from table B.

Example: 

Cartesian product of Players and Games 

<figure>
    <img src="/assets/images/cartesian.png" alt="cartesian">
    <figcaption><em>Points table</em>.</figcaption>
</figure>  

In SQL:
{% highlight sql %}
    SELECT * 
    FROM Players,Games;
{% endhighlight %}
Which translates to "select every row from the cartesian product of Players and Games".

# INNER JOINS
Take the cartesian product of Players and Points and then filter out the rows matching on player_id.
{% highlight sql %}
    SELECT name,points,game
    FROM Players,Points
    WHERE Players.player_id = Points.player_id; 
{% endhighlight %}
We can also write:
{% highlight sql %}
    SELECT name,points,game
    FROM Players JOIN Points ON(Players.player_id = Points.player_id)
    WHERE Players.player_id = Points.player_id; 
{% endhighlight %}
Since in this case the attribute we are joining on has the same name in both tables, we can write:
{% highlight sql %}
    SELECT name,points,game
    FROM Players JOIN Points USING(player_id)
    WHERE Players.player_id = Points.player_id; 
{% endhighlight %}
These queries produce the same result:
<figure>
    <img src="/assets/images/simple_join.png" alt="join">
    <figcaption><em>Joining Players and Points on player_id</em>.</figcaption>
</figure>  

# NATURAL JOIN
{% highlight sql %}
    SELECT name,points,game
    FROM Players NATURAL JOIN Points;
{% endhighlight %}
A **natural join** will automatically join on the matching columns in two tables. In this case the matching column is player_id.
This will produce the same table as above.

# OUTER JOINS
Imagine we have these two tables in our relational database:

**Employees**
<figure>
    <img src="/assets/images/employees.png" alt="join">
    <figcaption><em>Employees</em>.</figcaption>
</figure>
**CEO**  
<figure>
    <img src="/assets/images/ceo.png" alt="join">
    <figcaption><em>CEO</em>.</figcaption>
</figure> 
If we join on ```company``` we will lose the information about company c3 and c4 (because c3 doesn't have a CEO and c4 doesn't have any employees). If we want information about every company without losing anything we can do a **full outer join**:
{% highlight sql %}
    SELECT *
    FROM Employees FULL OUTER JOIN CEO ON (Employees.company = CEO.company);
{% endhighlight %}
Which gives us the following:
<figure>
    <img src="/assets/images/full_outer.png" alt="full_outer">
    <figcaption><em>Full outer join</em>.</figcaption>
</figure> 
As you can see the values that do not match on the join condition are replaced with NULL values. That is, a full outer join will give you the all the rows from the joining attribute in both tables, and replace missing values with NULL.

The following query will produce the same result but without the duplicate company column:
{% highlight sql %}
    SELECT *
    FROM Employees NATURAL FULL OUTER JOIN CEO;
{% endhighlight %}

# LEFT/RIGHT OUTER JOINS

**LEFT JOIN**
{% highlight sql %}
    SELECT *
    FROM Employees LEFT OUTER JOIN CEO ON (Employees.company = CEO.company);
{% endhighlight %}
<figure>
    <img src="/assets/images/left_join.png" alt="full_outer">
    <figcaption><em>Full outer join</em>.</figcaption>
</figure> 
A left/right join keeps all the rows from the left/right table and adds NULL for missing values.

# SUMMARY JOINS:
<figure>
    <img src="/assets/images/joins.png" alt="joins">
    <figcaption><em>Different types of JOINS</em>.</figcaption>
</figure> 


# SET OPERATIONS

## UNION
Union combines all rows from two queries. It also removes duplicates and uses columns names from the first table.
{% highlight sql %}
    (SELECT * FROM TableA)
    UNION
    (SELECT * FROM TableB);
{% endhighlight %}
Where each query must have matching columns types.

## INTERSECT
Intersect takes the intersection of two queries (all rows that appear in both).
{% highlight sql %}
    (SELECT * FROM TableA)
    INTERSECT
    (SELECT * FROM TableB)
{% endhighlight %}
## EXCEPT
Except removes the rows from the first table that also exist in the second table. This can be useful if you need to remove a
subset of a table from the table itself.
{% highlight sql %}
    (SELECT * FROM TableA)
    EXCEPT
    (SELECT * FROM TableB)
{% endhighlight %}

# ORDERING 
Ordering is used to order rows in a table or view based on one or more attributes/columns.
{% highlight sql %}
    SELECT *
    FROM TableName
    ORDER BY a1;
{% endhighlight %}
or
{% highlight sql %}
    SELECT *
    FROM TableName
    ORDER BY (a1,a2);
{% endhighlight %}
Use DESC/ASC if you want to order in descending or ascending order. DESC is the default ordering.

Example:

Select all the players who played in game 2 and order them by the number of points they scored:
{% highlight sql %}
    SELECT name,points
    FROM Players JOIN Points USING(player_id)
    WHERE game = 'g2'
    ORDER BY points;
{% endhighlight %}
<figure>
    <img src="/assets/images/points_g2.png" alt="joins">
    <figcaption><em>Points scored from game 2</em>.</figcaption>
</figure> 

# AGGREGATION
Aggregates are functions that processes groups of values together. Some common aggregate function in SQL are:

```COUNT```: Counts rows. Example: How many players are the league?

```AVG```: Mean of an attribute. Example: What is the average number of points scored?

```SUM```: SUM of an attribute: Example: How many points has been scored in total?

```MAX/MIN```: Max or min of an attribute. Example: What is the maximum/minimum number of points scored in a game?

# GROUPING
Aggregation is often used together with grouping. Grouping is used to group values based on another attribute. If we then apply
an aggregate function to a grouped table, the function will act on each group of the data. For example, we might want to count the **average** number of points scored **per game**.

Another example:

Get each players total points for all games:

{% highlight sql %}
    SELECT name,SUM(points) AS total
    FROM Players JOIN Points USING(player_id)
    GROUP BY player_id
    ORDER BY total;
{% endhighlight %}
<figure>
    <img src="/assets/images/total_points.png" alt="joins">
    <figcaption><em>Total points for each player</em>.</figcaption>
</figure> 

# HAVING
If we want to exclude players that have only scored 3 or less points, we can use ```HAVING```:
{% highlight sql %}
    SELECT name,SUM(points) AS total
    FROM Players JOIN Points USING(player_id)
    GROUP BY player_id
    HAVING total > 3
    ORDER BY total;
{% endhighlight %}
<figure>
    <img src="/assets/images/best_points.png" alt="joins">
    <figcaption><em>Top two players based on points</em>.</figcaption>
</figure> 

# SUBQUERIES
Subqueries are queries within queries and you can have them almost anywhere.

Examples:

{% highlight sql %}
    SELECT <attributes>
    FROM Table, (<subquery>) AS sq;
{% endhighlight %}

{% highlight sql %}
    SELECT <attributes>
    FROM Table
    WHERE <attribute> < (<subquery>);
{% endhighlight %}

{% highlight sql %}
    SELECT <attributes>, <subquery>
    FROM Table;
{% endhighlight %}

# WITH 
The ```WITH``` clause can be useful when building more complicated queries. 

Basic structure:
{% highlight sql %}
    WITH <query1> AS <name1>,
         <query2> AS <name2>,
         <query3> AS <name3>
    SELECT ...
    FROM <name1>,<name2>,<name3>; 
{% endhighlight %}

It can also be used to build one column at a time:
{% highlight sql %}
    WITH
        col1 AS <query>,
        col2 AS <query>,
        col3 AS <query>
    SELECT <attributes>
    FROM col1
    NATURAL LEFT OUTER JOIN col2
    NATURAL LEFT OUTER JOIN col3;
{% endhighlight %}
In this case each helper query needs to have a common attribute to join on, where the left most join needs to have all the rows that we want.















